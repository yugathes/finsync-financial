generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  email         String    @unique
  password      String?
  monthlyIncome Decimal?  @default(0) @map("monthly_income") @db.Decimal(10, 2)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  monthlyIncomes     MonthlyIncome[]
  commitments        Commitment[]
  commitmentPayments CommitmentPayment[] @relation("PaymentsByUser")
  ownedGroups        Group[]             @relation("GroupOwner")
  groupMemberships   GroupMember[]

  @@map("users")
}

model MonthlyIncome {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  month     String   // e.g., '2025-07'
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("monthly_income")
}

model Commitment {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  type       String    // 'static' | 'dynamic'
  title      String
  category   String
  amount     Decimal   @db.Decimal(10, 2)
  recurring  Boolean   @default(false)
  shared     Boolean   @default(false)
  groupId    String?   @map("group_id") @db.Uuid
  startDate  DateTime? @map("start_date") @db.Date
  isImported Boolean   @default(false) @map("is_imported")
  importedAt DateTime? @map("imported_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user     User                @relation(fields: [userId], references: [id])
  group    Group?              @relation(fields: [groupId], references: [id])
  payments CommitmentPayment[]

  @@map("commitments")
}

model CommitmentPayment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  commitmentId String   @map("commitment_id") @db.Uuid
  month        String   // e.g., '2025-07'
  paidBy       String   @map("paid_by") @db.Uuid
  amountPaid   Decimal  @map("amount_paid") @db.Decimal(10, 2)
  paidAt       DateTime @default(now()) @map("paid_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  commitment Commitment @relation(fields: [commitmentId], references: [id])
  user       User       @relation("PaymentsByUser", fields: [paidBy], references: [id])

  @@map("commitment_payments")
}

model Group {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name      String
  ownerId   String   @map("owner_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  owner       User          @relation("GroupOwner", fields: [ownerId], references: [id])
  members     GroupMember[]
  commitments Commitment[]

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  groupId   String   @map("group_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      String   // 'owner' | 'member'
  status    String   // 'invited' | 'accepted'
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@map("group_members")
}
